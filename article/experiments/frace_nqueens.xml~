<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="pso" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <inertiaWeight class="tuning.TuningControlParameter" index="0"/>
                        <cognitiveAcceleration class="tuning.TuningControlParameter" index="1"/>
                        <socialAcceleration class="tuning.TuningControlParameter" index="2"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
        </algorithm>

        <algorithm id="frace" class="tuning.TuningAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="100"/>

            <iterationStrategy class="tuning.IFRaceIterationStrategy">
                <iterationStrategy class="tuning.FRaceIterationStrategy">
                    <minProblems class="controlparameter.ConstantControlParameter" parameter="5"/>
                    <minSolutions class="controlparameter.ConstantControlParameter" parameter="2"/>
                </iterationStrategy>

                <parameterChangeTrigger class="tuning.parameterchange.triggers.PeriodicParameterChangeTrigger">
                    <period class="controlparameter.ConstantControlParameter" parameter="10"/>
                </parameterChangeTrigger>

                <parameterChangeReaction class="tuning.parameterchange.reactions.MinMaxParameterChangeReaction">
                    <count class="controlparameter.ConstantControlParameter" parameter="100"/>
                </parameterChangeReaction>
            </iterationStrategy>

            <parameterProvider class="tuning.parameterlist.SobolParameterListProvider">
                <addParameterBounds class="tuning.parameters.TuningBounds" lowerBound="0.0" upperBound="1.0"/>
                <addParameterBounds class="tuning.parameters.TuningBounds" lowerBound="0.0" upperBound="4.0"/>
                <addParameterBounds class="tuning.parameters.TuningBounds" lowerBound="0.0" upperBound="4.0"/>
                <count value="100"/>
            </parameterProvider>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="n-queens" class="tuning.TuningProblem" domain="R(-5:5)^10">

            <samples value="10"/>
            <targetAlgorithm idref="pso"/>
            <measurement class="measurement.single.Fitness"/>

            <problemsProvider class="tuning.problem.StandardProblemGenerator">
                <addProblem id="AM-LinearQueens64" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^64">
                            <function class="functions.discrete.LinearQueens" boardSize="8"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-LinearQueens81" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^81">
                            <function class="functions.discrete.LinearQueens" boardSize="9"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-LinearQueens100" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^100">
                            <function class="functions.discrete.LinearQueens" boardSize="10"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-LinearQueens121" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^121">
                            <function class="functions.discrete.LinearQueens" boardSize="11"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-LinearQueens144" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^144">
                            <function class="functions.discrete.LinearQueens" boardSize="12"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>
            </problemsProvider>
        </problem>


        <problem id="knights-coverage" class="tuning.TuningProblem" domain="R(-5:5)^10">

            <samples value="10"/>
            <targetAlgorithm idref="pso"/>
            <measurement class="measurement.single.Fitness"/>

            <problemsProvider class="tuning.problem.StandardProblemGenerator">
                <addProblem id="AM-knights-coverage64" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^64">
                            <function class="functions.discrete.KnightsCoverage" boardSize="8"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage81" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^81">
                            <function class="functions.discrete.KnightsCoverage" boardSize="9"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage100" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^100">
                            <function class="functions.discrete.KnightsCoverage" boardSize="10"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage121" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^121">
                            <function class="functions.discrete.KnightsCoverage" boardSize="11"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage144" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^144">
                            <function class="functions.discrete.KnightsCoverage" boardSize="12"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>
            </problemsProvider>
        </problem>


        <problem id="r-knights-tour" class="tuning.TuningProblem" domain="R(-5:5)^10">

            <samples value="10"/>
            <targetAlgorithm idref="pso"/>
            <measurement class="measurement.single.Fitness"/>

            <problemsProvider class="tuning.problem.StandardProblemGenerator">
                <addProblem id="AM-knights-coverage64" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^64">
                            <objective class="problem.objective.Maximise" />
                            <function class="functions.discrete.RepairingKnightsTour" boardSize="8"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage81" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^81">
                            <objective class="problem.objective.Maximise" />
                            <function class="functions.discrete.RepairingKnightsTour" boardSize="9"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage100" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^100">
                            <objective class="problem.objective.Maximise" />
                            <function class="functions.discrete.RepairingKnightsTour" boardSize="10"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage121" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^121">
                            <objective class="problem.objective.Maximise" />
                            <function class="functions.discrete.RepairingKnightsTour" boardSize="11"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>

                <addProblem id="AM-knights-coverage144" class="problem.AngleModulationProblem" domain="R(0:1)^4">
                    <generatingFunction class="functions.continuous.am.AMBitGeneratingFunction" precision="2">
		                <delegate class="problem.FunctionOptimisationProblem" domain="B^144">
                            <objective class="problem.objective.Maximise" />
                            <function class="functions.discrete.RepairingKnightsTour" boardSize="12"/>
                        </delegate>
                    </generatingFunction>
	            </addProblem>
            </problemsProvider>
        </problem>
    </problems>

    <measurements id="measurements" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.multiple.MultipleSolutions"/>
    </measurements>

    <simulations>
		<simulation samples="1">
            <algorithm idref="frace"/>
            <problem idref="n-queens"/>
            <measurements idref="measurements" />
            <output format="TXT" file="data/frace_AMPSO_nqueens.txt"/>
        </simulation>
    </simulations>

    <simulations>
		<simulation samples="1">
            <algorithm idref="frace"/>
            <problem idref="knights-coverage"/>
            <measurements idref="measurements" />
            <output format="TXT" file="data/frace_AMPSO_knights-coverage.txt"/>
        </simulation>
    </simulations>

    <simulations>
		<simulation samples="1">
            <algorithm idref="frace"/>
            <problem idref="r-knights-tour"/>
            <measurements idref="measurements" />
            <output format="TXT" file="data/frace_AMPSO_r-knights-tour.txt"/>
        </simulation>
    </simulations>
</simulator>
